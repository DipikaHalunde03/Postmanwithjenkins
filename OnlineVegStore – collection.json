{
	"info": {
		"_postman_id": "5b72e167-a317-4a75-8766-6aa522e15543",
		"name": "OnlineVegStore – PaymentService API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40247828",
		"_collection_link": "https://g1-sprint-3.postman.co/workspace/G1-Sprint--3-Workspace~27d10f7f-4cd9-44b2-82c0-6e7c8f50ff18/collection/40247828-5b72e167-a317-4a75-8766-6aa522e15543?action=share&source=collection_link&creator=40247828"
	},
	"item": [
		{
			"name": "Post Requests",
			"item": [
				{
					"name": "Access AuthCode – Login API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ✅ Check if the response status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// ✅ Check if the response time is less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// ✅ Parse the response once\r",
									"const response = pm.response.json();\r",
									"\r",
									"// ✅ Check if the auth code exists (key may vary)\r",
									"pm.test(\"Auth code exists\", function () {\r",
									"    pm.expect(response.auth_code).to.exist;  // Corrected key from 'code' to 'auth_code'\r",
									"});\r",
									"\r",
									"// ✅ Check if the auth code is a string\r",
									"pm.test(\"Auth code is a string\", function () {\r",
									"    pm.expect(response.auth_code).to.be.a('string');  // Corrected key from 'code' to 'auth_code'\r",
									"});\r",
									"\r",
									"// ✅ Check Content-Type header\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// ✅ Save auth code to environment variable\r",
									"pm.environment.set(\"authcode\", response.auth_code);  // Corrected key from 'code' to 'auth_code'\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "user1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pass123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://webapps.tekstac.com/OAuthRestApi/webapi/auth/login",
							"protocol": "https",
							"host": [
								"webapps",
								"tekstac",
								"com"
							],
							"path": [
								"OAuthRestApi",
								"webapi",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = xml2Json(pm.response.text());\r",
									"\r",
									"// Basic tests\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is XML\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");\r",
									"});\r",
									"\r",
									"// Positive tests\r",
									"pm.test(\"Payments array exists\", function () {\r",
									"    pm.expect(jsonResponse.payments).to.exist;\r",
									"    pm.expect(jsonResponse.payments.payment).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"jsonResponse.payments.payment.forEach(payment => {\r",
									"    pm.test(\"Payment structure is valid\", function () {\r",
									"        pm.expect(payment.customerName).to.exist;\r",
									"        pm.expect(payment.paymentAmount).to.exist;\r",
									"        pm.expect(payment.paymentDate).to.exist;\r",
									"        pm.expect(payment.paymentDesc).to.exist;\r",
									"        pm.expect(payment.paymentId).to.exist;\r",
									"        pm.expect(payment.paymentMode).to.exist;\r",
									"        pm.expect(payment.paymentStatus).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "paymentId",
									"value": "10003",
									"type": "text"
								},
								{
									"key": "paymentAmount",
									"value": "5000",
									"type": "text"
								},
								{
									"key": "paymentDesc",
									"value": "Vegetables",
									"type": "text"
								},
								{
									"key": "paymentDate",
									"value": "01/01/2022",
									"type": "text"
								},
								{
									"key": "customerName",
									"value": "Peter",
									"type": "text"
								},
								{
									"key": "paymentStatus",
									"value": "PAID",
									"type": "text"
								},
								{
									"key": "paymentMode",
									"value": "UPI",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/addPayment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"addPayment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"// Test for content-type header\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test for access_token existence in response\r",
									"pm.test(\"Access token exists\", function () {\r",
									"    pm.expect(response.access_token).to.exist;\r",
									"});\r",
									"\r",
									"// Test for access_token type\r",
									"pm.test(\"Access token is a string\", function () {\r",
									"    pm.expect(response.access_token).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Save token to environment variable\r",
									"pm.environment.set(\"access_token\", response.access_token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "auth_code",
									"value": "{{authcode}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://webapps.tekstac.com/OAuthRestApi/webapi/auth/token",
							"protocol": "https",
							"host": [
								"webapps",
								"tekstac",
								"com"
							],
							"path": [
								"OAuthRestApi",
								"webapi",
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Requests",
			"item": [
				{
					"name": "View Payment List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"Response is a list of payments\", () => {\r",
									"    let data = xml2Json(pm.response.text());  // ✅ Parse XML\r",
									"    // Check if there are payments\r",
									"    pm.expect(data).to.have.property(\"payments\");\r",
									"    pm.expect(data.payments).to.have.property(\"payment\");\r",
									"\r",
									"    let paymentArray = data.payments.payment;\r",
									"\r",
									"    // In case it's a single object instead of array\r",
									"    if (!Array.isArray(paymentArray)) {\r",
									"        paymentArray = [paymentArray];\r",
									"    }\r",
									"\r",
									"    pm.expect(Array.isArray(paymentArray)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is XML\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/viewPaymentList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"viewPaymentList"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Payment By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = xml2Json(pm.response.text());\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct content type\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/xml\");\r",
									"});\r",
									"\r",
									"pm.test(\"Payment details are present\", function () {\r",
									"    pm.expect(jsonResponse.payment).to.exist;\r",
									"    pm.expect(jsonResponse.payment.customerName).to.exist;\r",
									"    pm.expect(jsonResponse.payment.paymentAmount).to.exist;\r",
									"    pm.expect(jsonResponse.payment.paymentDate).to.exist;\r",
									"    pm.expect(jsonResponse.payment.paymentDesc).to.exist;\r",
									"    pm.expect(jsonResponse.payment.paymentId).to.exist;\r",
									"    pm.expect(jsonResponse.payment.paymentMode).to.exist;\r",
									"    pm.expect(jsonResponse.payment.paymentStatus).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Payment amount is a number\", function () {\r",
									"    pm.expect(parseFloat(jsonResponse.payment.paymentAmount._)).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Pass if Payment ID is missing\", function () {\r",
									"    let xmlData = xml2Json(pm.response.text());\r",
									"    pm.expect(xmlData.payment.paymentId).to.be.undefined; // Test will PASS if paymentId is missing\r",
									"});\r",
									"\r",
									"pm.test(\"Negative: Pass if paymentAmount is NOT a number\", function () {\r",
									"    let xmlData = xml2Json(pm.response.text());\r",
									"    let amountValue = xmlData.payment.paymentAmount;\r",
									"\r",
									"    // Try parsing the actual text value\r",
									"    let amount = parseFloat(amountValue);\r",
									"    \r",
									"    // Expect it to be NaN only if it's invalid\r",
									"    pm.expect(isNaN(amount)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/viewPaymentById/10001",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"viewPaymentById",
								"10001"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Payment By Mode-UPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = xml2Json(pm.response.text());\r",
									"\r",
									"// Basic Tests\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct Content-Type\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/xml\");\r",
									"});\r",
									"\r",
									"// Validate the structure of the response\r",
									"pm.test(\"Response has payments element\", function () {\r",
									"    pm.expect(jsonResponse.payments).to.exist;\r",
									"    pm.expect(jsonResponse.payments.payment).to.be.an('object'); // Changed to object\r",
									"    pm.expect(jsonResponse.payments.payment).to.exist; // Check if payment exists\r",
									"    pm.expect(jsonResponse.payments.payment).to.have.property('customerName'); // Validate single payment structure\r",
									"});\r",
									"\r",
									"// Validate payment details\r",
									"const payment = jsonResponse.payments.payment; // Access single payment object\r",
									"\r",
									"pm.test(\"Payment has customerName\", function () {\r",
									"    pm.expect(payment.customerName).to.exist;\r",
									"    pm.expect(payment.customerName).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment has paymentAmount\", function () {\r",
									"    pm.expect(payment.paymentAmount).to.exist;\r",
									"    pm.expect(payment.paymentAmount).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment has paymentDate\", function () {\r",
									"    pm.expect(payment.paymentDate).to.exist;\r",
									"    pm.expect(payment.paymentDate).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment has paymentDesc\", function () {\r",
									"    pm.expect(payment.paymentDesc).to.exist;\r",
									"    pm.expect(payment.paymentDesc).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment has paymentId\", function () {\r",
									"    pm.expect(payment.paymentId).to.exist;\r",
									"    pm.expect(payment.paymentId).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment has paymentMode\", function () {\r",
									"    pm.expect(payment.paymentMode).to.exist;\r",
									"    pm.expect(payment.paymentMode).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Payment has paymentStatus\", function () {\r",
									"    pm.expect(payment.paymentStatus).to.exist;\r",
									"    pm.expect(payment.paymentStatus).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Negative Test\r",
									"pm.test(\"Negative test for non-existing paymentId\", function () {\r",
									"    const nonExistingPaymentId = \"99999\";\r",
									"    pm.expect(payment.paymentId).to.not.equal(nonExistingPaymentId); // Check single paymentId\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/viewPaymentByMode?paymentMode=UPI",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"viewPaymentByMode"
							],
							"query": [
								{
									"key": "paymentMode",
									"value": "UPI"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Put Requests",
			"item": [
				{
					"name": "updatePaymentAmount",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "paymentId",
									"value": "10001",
									"type": "text"
								},
								{
									"key": "paymentAmount",
									"value": "4000 ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/updatePaymentAmount",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"updatePaymentAmount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Requests",
			"item": [
				{
					"name": "DELETE PAYMENT BY ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/deletePaymentById/10002",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"deletePaymentById",
								"10002"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://webapps.tekstac.com/OnlineVegStoreAPI/PaymentService",
			"type": "string"
		},
		{
			"key": "auth_url",
			"value": "https://webapps.tekstac.com/OAuthRestApi/webapi/auth",
			"type": "string"
		},
		{
			"key": "access_token\t",
			"value": "",
			"type": "string"
		}
	]
}